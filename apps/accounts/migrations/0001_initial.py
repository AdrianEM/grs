# Generated by Django 2.2.1 on 2019-10-21 17:42

from django.conf import settings
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import django_countries.fields
import model_utils.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('full_name', models.CharField(db_column='FullName', max_length=150)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('birthday', models.DateField(blank=True, db_column='Birthday', help_text='birthday', null=True)),
                ('who_can_see_last_name', models.CharField(choices=[('F', 'Friends only'), ('E', 'Everyone'), ('N', 'No one')], db_column='WhoCanSeeLastName', default='F', max_length=2)),
                ('photo', models.ImageField(blank=True, db_column='Photo', help_text='profile_image', upload_to='')),
                ('city', models.CharField(blank=True, db_column='City', help_text='user_city', max_length=70)),
                ('state', models.CharField(db_column='State', help_text='user_province', max_length=70)),
                ('country', django_countries.fields.CountryField(db_column='Country', help_text='country', max_length=2)),
                ('location_view', models.CharField(choices=[('F', 'Friends only'), ('E', 'Everyone'), ('N', 'No one')], db_column='LocationView', default='E', help_text='who_user_location', max_length=2)),
                ('gender', models.CharField(blank=True, choices=[('F', 'Female'), ('M', 'Male'), ('X', 'X')], db_column='Gender', help_text='gender', max_length=2)),
                ('gender_view', models.CharField(choices=[('F', 'Friends only'), ('E', 'Everyone'), ('N', 'No one')], db_column='GenderView', default='F', help_text='gender_view', max_length=2)),
                ('age_view', models.CharField(choices=[('1', 'Age & birthday to Goodreads members'), ('2', 'Age to Goodreads members, birthday to friends'), ('3', 'Age to Goodreads members, birthday to no one'), ('4', 'Age and birthday to friends'), ('5', 'Age to friends, birthday to no one'), ('6', 'Age and birthday to no one'), ('7', 'Age to no one, birthday to Goodreads members'), ('8', 'Age to no one, birthday to friends')], db_column='AgeView', default='2', help_text='age_view', max_length=2)),
                ('web_site', models.URLField(blank=True, db_column='WebSite', help_text='web_site')),
                ('interests', models.TextField(blank=True, db_column='Interests', help_text='interests')),
                ('kind_books', models.TextField(blank=True, db_column='KindBooks', help_text='book_subject_preferences')),
                ('about_me', models.TextField(blank=True, db_column='AboutMe', help_text='user_about_me')),
                ('active', models.BooleanField(db_column='Active', default=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'UserProfile',
                'ordering': ['created'],
            },
        ),
        migrations.CreateModel(
            name='ReadingGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('name', models.CharField(db_column='Name', help_text='Name', max_length=150)),
                ('description', models.TextField(db_column='Description', help_text='Description')),
                ('rules', models.TextField(blank=True, db_column='Rules', help_text='Rules')),
                ('show_rules_only_new_members', models.BooleanField(db_column='ShowRulesOnlyNewMembers', default=True, help_text='Show rules only to new members')),
                ('topic', models.CharField(choices=[('BL', 'Books & Literature'), ('B', 'Business'), ('EA', 'Entertainment & Art'), ('FC', 'Friends & Commons Interests'), ('G', 'Geography'), ('GA', 'Goodreads authors'), ('JF', 'Just for fun'), ('O', 'Organizations'), ('SG', 'Students groups')], db_column='Topic', help_text='Group or bookclub topic', max_length=3)),
                ('subtopic', models.CharField(blank=True, db_column='subtopic', help_text='Subtopic', max_length=3)),
                ('tags', models.TextField(db_column='Tags', help_text='Tags')),
                ('privacy', models.CharField(choices=[('PU', 'Public'), ('R', 'Restricted'), ('PR', 'Private'), ('S', 'Secret')], db_column='Privacy', default='PU', help_text='this group is', max_length=2)),
                ('only_adults', models.BooleanField(db_column='OnlyAdults', default=False, help_text='For adults only')),
                ('non_mod_add_book', models.BooleanField(db_column='NonModeratorAddBook', default=True, help_text="Non-moderator can add books to this group's shelf")),
                ('non_mod_add_event', models.BooleanField(db_column='NonModeratorAddEvent', default=True, help_text='Non-moderator can add events')),
                ('mod_post_highlighted', models.BooleanField(db_column='ModeratorPostHighlighted', default=True, help_text='Moderator posts are highlighted')),
                ('meet_real_life', models.BooleanField(db_column='MeetRealLife', default=False, help_text='This group meets in real life')),
                ('display_video_top', models.BooleanField(db_column='DisplayVideo', default=False, help_text="Display videos at the top of this group's homepage")),
                ('challenge_question', models.TextField(blank=True, db_column='ChallengeQuestion', help_text='Challenge question, only for private groups')),
                ('postal_code', models.CharField(blank=True, db_column='PostalCode', help_text='Postal code(for local group)', max_length=25)),
                ('country', django_countries.fields.CountryField(db_column='Country', help_text='country', max_length=2)),
                ('active', models.BooleanField(db_column='Active', default=True)),
                ('website', models.CharField(blank=True, db_column='WebSite', help_text='Affiliated website', max_length=150)),
                ('group_email_setting', models.CharField(choices=[('D', 'Digest'), ('I', 'Individual'), ('A', 'All'), ('O', 'Notification only'), ('N', 'None')], db_column='GroupEmailSett', default='D', help_text='Group discussion email settings', max_length=2)),
                ('creator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reading_groups', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='UserSettings',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('allow_non_friends_follow_reviews', models.BooleanField(db_column='AllowNonFriendsFollowReviews', default=True, help_text='allow-nonfriends-to-comments-reviews')),
                ('who_can_send_me_private_msg', models.CharField(choices=[('F', 'Friends only'), ('E', 'Everyone'), ('N', 'No one')], db_column='WhoCanSendMePrivMessages', default='F', help_text='who_can_send_me_private_message', max_length=2)),
                ('email_visibility', models.CharField(choices=[('F', 'Friends only'), ('E', 'Everyone'), ('N', 'No one')], db_column='EmailVisibility', help_text='email_visibility', max_length=2)),
                ('challenge_question', models.TextField(db_column='ChallengeQuestion', help_text='challenge_question', max_length=2)),
                ('profile_view', models.CharField(choices=[('A', 'Anyone(including search engines)'), ('G', 'Goodreads members'), ('F', 'Just my friends')], db_column='ProfileView', default='G', help_text='profile_view', max_length=2)),
                ('recommendations', models.BooleanField(db_column='Recomendations', default=True, help_text='Recommendations')),
                ('language', models.CharField(choices=[('en', 'English'), ('es', 'Spanish')], db_column='Language', help_text='Language', max_length=2)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'UserSettings',
            },
        ),
        migrations.CreateModel(
            name='ReadingGroupUsers',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('active', models.BooleanField(db_column='Active', default=False)),
                ('invitation_answered', models.BooleanField(default=False)),
                ('is_admin', models.BooleanField(default=False)),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reading_group_users', to='accounts.ReadingGroup')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('who_invites', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ReadingGroupEmailSetting',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('get_email', models.CharField(choices=[('D', 'Digest'), ('I', 'Individual'), ('A', 'All'), ('O', 'Notification only'), ('N', 'None')], default='N', max_length=1)),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='accounts.ReadingGroup')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='FeedSetting',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('add_book', models.BooleanField(db_column='AddBook', default=True, help_text='Add a book to your shelves')),
                ('add_quote', models.BooleanField(db_column='AddQuote', default=True, help_text='Add a quote')),
                ('recommend_book', models.BooleanField(db_column='RecommendBook', default=True, help_text='Recommend a book')),
                ('add_new_status', models.BooleanField(db_column='AddNewStatus', default=True, help_text="Add a new status to a book you're reading")),
                ('comment_so_review', models.BooleanField(db_column='CommentSoReview', default=True, help_text="Comment on someone's review")),
                ('vote_book_review', models.BooleanField(db_column='VoteBookReview', default=True, help_text='Vote for a book review')),
                ('add_friend', models.BooleanField(db_column='AddFried', default=True, help_text='Add a friend')),
                ('comment_book_or_discussion', models.BooleanField(db_column='CommentBookOrDiscussion', default=True, help_text='Comment on a book or discussion')),
                ('join_group', models.BooleanField(db_column='JoinGroup', default=True, help_text='Join a group')),
                ('answer_poll', models.BooleanField(db_column='AnswerPoll', default=True, help_text='Answer a poll')),
                ('enter_giveaway', models.BooleanField(db_column='EnterGiveaway', default=True, help_text='Enter a Giveaway')),
                ('ask_answer', models.BooleanField(db_column='AskAnswer', default=True, help_text='Ask or answer a question')),
                ('follow_author', models.BooleanField(db_column='FollowAuthor', default=True, help_text='Follow an author')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='feed_setting', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'FeedSetting',
            },
        ),
        migrations.CreateModel(
            name='EmailSettings',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('email_frequency', models.CharField(choices=[('N', 'Never'), ('D', 'Once a day'), ('W', 'Once a week')], db_column='EmailFrequency', help_text='Email Frequency', max_length=2)),
                ('include_top_friends_only', models.BooleanField(db_column='IncludeTopFriendsOnly', default=False, help_text='Include top friends only')),
                ('include_to_read_books', models.BooleanField(db_column='IncludeToReadBooks', default=True, help_text='Include to read books')),
                ('likes_my_status', models.BooleanField(db_column='WhenSOLikeMyStatus', default=True, help_text='When someone like my update, review, note, highlight, photo, quiz or writing')),
                ('sends_me_message', models.BooleanField(db_column='SendsMeMessage', default=True, help_text='Sends me a message')),
                ('adds_me_friend', models.BooleanField(db_column='AddMeAsFriend', default=True, help_text='Adds me as a friend')),
                ('follow_my_review', models.BooleanField(db_column='FollowMyReview', default=True, help_text='Follows my review')),
                ('invites_group', models.BooleanField(db_column='InviteGroup', default=True, help_text='Invites me to join a group')),
                ('invites_event', models.BooleanField(db_column='InviteEvent', default=True, help_text='Invites me to an event')),
                ('invites_trivia', models.BooleanField(db_column='InviteTrivia', default=True, help_text='Invites to play trivia')),
                ('ask_vote', models.BooleanField(db_column='AskVote', default=True, help_text='Asks me to vote on a Listopia list, take a quiz, or like a quote')),
                ('invites_poll', models.BooleanField(db_column='InvitePoll', default=True, help_text='Invites me to answer a poll')),
                ('mention_recommender', models.BooleanField(db_column='MentionsRecommender', default=True, help_text='Mentions me as a recommender')),
                ('recommend_book', models.BooleanField(db_column='RecommendBook', default=True, help_text='Recommends me a book')),
                ('comment_review', models.CharField(choices=[('E', 'an email'), ('N', 'a notification'), ('B', 'both'), ('A', 'Nothing')], db_column='CommentsReview', default='B', help_text='Comments on my book reviews', max_length=2)),
                ('comment_profile', models.CharField(choices=[('E', 'an email'), ('N', 'a notification'), ('B', 'both'), ('A', 'Nothing')], db_column='CommentProfile', default='B', help_text='Comments on my profile', max_length=2)),
                ('like_listopia', models.CharField(choices=[('E', 'an email'), ('N', 'a notification'), ('B', 'both'), ('A', 'Nothing')], db_column='LikeListopia', default='E', help_text='Likes my Listopia list', max_length=2)),
                ('comment_listopia', models.CharField(choices=[('E', 'an email'), ('N', 'a notification'), ('B', 'both'), ('A', 'Nothing')], db_column='CommentListopia', default='B', help_text='Comments on my Listopia list', max_length=2)),
                ('comment_recommendation', models.CharField(choices=[('E', 'an email'), ('N', 'a notification'), ('B', 'both'), ('A', 'Nothing')], db_column='CommentRecommendation', default='B', help_text='Comments on a recommendation that I’ve given or commented on', max_length=2)),
                ('comment_poll', models.CharField(choices=[('E', 'an email'), ('N', 'a notification'), ('B', 'both'), ('A', 'Nothing')], db_column='CommentPoll', default='B', help_text='Comments on my poll', max_length=2)),
                ('comment_trivia', models.CharField(choices=[('E', 'an email'), ('N', 'a notification'), ('B', 'both'), ('A', 'Nothing')], db_column='CommentTrivia', default='B', help_text='Comments on my trivia question', max_length=2)),
                ('comment_shelve', models.CharField(choices=[('E', 'an email'), ('N', 'a notification'), ('B', 'both'), ('A', 'Nothing')], db_column='CommentShelve', default='B', help_text='Comments on my shelvings, progress updates, notes, quotes, or highlights', max_length=2)),
                ('comment_activity', models.CharField(choices=[('E', 'an email'), ('N', 'a notification'), ('B', 'both'), ('A', 'Nothing')], db_column='CommentActivity', default='B', help_text='Comments on an activity or review I commented on', max_length=2)),
                ('comment_qa', models.CharField(choices=[('E', 'an email'), ('N', 'a notification'), ('B', 'both'), ('A', 'Nothing')], db_column='CommentQA', default='B', help_text='Comments on a Goodreads Q&A that I’ve answered or commented on', max_length=2)),
                ('like_question', models.CharField(choices=[('E', 'an email'), ('N', 'a notification'), ('B', 'both'), ('A', 'Nothing')], db_column='LikeQuestion', default='E', help_text='Likes my question or answer for Goodreads Q&A', max_length=2)),
                ('list_giveaway_book_toread', models.CharField(choices=[('E', 'an email'), ('N', 'a notification'), ('B', 'both'), ('A', 'Nothing')], db_column='ListBookToRead', default='E', help_text='Lists a Giveaway with a book I added as To-Read', max_length=2)),
                ('list_giveaway_author_fallow', models.CharField(choices=[('E', 'an email'), ('N', 'a notification'), ('B', 'both'), ('A', 'Nothing')], db_column='ListGiveAwayAuthorFollow', default='B', help_text='Lists a Giveaway with a book by an author I follow', max_length=2)),
                ('comment_friendship', models.CharField(choices=[('E', 'an email'), ('N', 'a notification'), ('B', 'both'), ('A', 'Nothing')], db_column='CommentFriendship', default='B', help_text='Comments on my friendship with another user', max_length=2)),
                ('post_note', models.CharField(choices=[('E', 'an email'), ('N', 'a notification'), ('B', 'both'), ('A', 'Nothing')], db_column='PostNote', default='B', help_text='Posts notes and highlights for a book or author I have previously shelved (friend/following/author/notable)', max_length=2)),
                ('monthly_newsletter', models.BooleanField(db_column='MonthlyNewsletter', default=True, help_text='monthly_goodreads_newsletters')),
                ('newsletter_favorite_genre', models.BooleanField(db_column='NewsletterFavoriteGenre', default=True, help_text='newsletter_favorite_genre')),
                ('young_newsletter', models.BooleanField(db_column='YoungNewsletter', default=True, help_text='young_newsletter')),
                ('romance_newsletter', models.BooleanField(db_column='RomanceNewsletter', default=True, help_text='romance_newsletter')),
                ('monthly_new_release', models.BooleanField(db_column='MonthlyNewRelease', default=True, help_text='monthly_new_release')),
                ('monthly_new_release_only_author_read', models.BooleanField(db_column='MonthlyNewReleaseOnlyAuthorRead', default=False, help_text='monthly_new_release_only_author_read')),
                ('new_features_gr', models.BooleanField(db_column='NewFeaturesGr', default=True, help_text='new_features_gr')),
                ('update_giveaway_won', models.BooleanField(db_column='UpdateGiveawayWon', default=True, help_text='update_giveaway_won')),
                ('update_giveaway_entered', models.BooleanField(db_column='UpdateGiveawayEntered', default=True, help_text='update_giveaway_entered')),
                ('weekly_digest', models.BooleanField(db_column='WeeklyDigest', default=True, help_text='weekly_digest')),
                ('author_rated', models.BooleanField(db_column='AuthorRated', default=True, help_text='author_rated')),
                ('book_available', models.BooleanField(db_column='BookAvailable', default=True, help_text='book_available')),
                ('author_release', models.BooleanField(db_column='AuthorRelease', default=True, help_text='author_release')),
                ('recommendation_finish_book', models.BooleanField(db_column='RecommendationFinishBook', default=True, help_text='recommendation_finish_book')),
                ('discussion_new_post', models.CharField(choices=[('D', 'Daily'), ('W', 'Weekly')], db_column='DiscussionNewPost', default='D', help_text='discussion_new_post', max_length=1)),
                ('follow_discussion', models.BooleanField(db_column='FollowDiscussion', default=True, help_text='follow_discussion')),
                ('group_start_reading', models.BooleanField(db_column='GroupStartReading', default=True, help_text='group_start_reading')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='email_setting', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'EmailSetting',
            },
        ),
    ]

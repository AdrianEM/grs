# Generated by Django 2.2.1 on 2019-06-02 20:50

from django.db import migrations, models
import django.db.models.deletion
import django_countries.fields


class Migration(migrations.Migration):

    dependencies = [
        ('books', '0002_auto_20190602_2050'),
        ('accounts', '0009_auto_20190529_2105'),
    ]

    operations = [
        migrations.CreateModel(
            name='ReadingGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_column='Name', help_text='Name', max_length=150)),
            ],
        ),
        migrations.AlterField(
            model_name='shelve',
            name='name',
            field=models.CharField(db_column='Name', help_text='Name', max_length=150),
        ),
        migrations.AlterField(
            model_name='userprofile',
            name='about_me',
            field=models.TextField(blank=True, db_column='AboutMe', help_text='user_about_me'),
        ),
        migrations.AlterField(
            model_name='userprofile',
            name='active',
            field=models.BooleanField(db_column='Active', default=True),
        ),
        migrations.AlterField(
            model_name='userprofile',
            name='age_view',
            field=models.CharField(choices=[('1', 'Age & birthday to Goodreads members'), ('2', 'Age to Goodreads members, birthday to friends'), ('3', 'Age to Goodreads members, birthday to no one'), ('4', 'Age and birthday to friends'), ('5', 'Age to friends, birthday to no one'), ('6', 'Age and birthday to no one'), ('7', 'Age to no one, birthday to Goodreads members'), ('8', 'Age to no one, birthday to friends')], db_column='AgeView', default='2', help_text='age_view', max_length=2),
        ),
        migrations.AlterField(
            model_name='userprofile',
            name='birthday',
            field=models.DateField(blank=True, db_column='Birthday', help_text='birthday', null=True),
        ),
        migrations.AlterField(
            model_name='userprofile',
            name='city',
            field=models.CharField(blank=True, db_column='City', help_text='user_city', max_length=70),
        ),
        migrations.AlterField(
            model_name='userprofile',
            name='country',
            field=django_countries.fields.CountryField(db_column='Country', help_text='country', max_length=2),
        ),
        migrations.AlterField(
            model_name='userprofile',
            name='gender',
            field=models.CharField(blank=True, choices=[('F', 'Female'), ('M', 'Male'), ('X', 'X')], db_column='Gender', help_text='gender', max_length=2),
        ),
        migrations.AlterField(
            model_name='userprofile',
            name='gender_view',
            field=models.CharField(choices=[('F', 'Friends only'), ('E', 'Everyone'), ('N', 'No one')], db_column='GenderView', default='F', help_text='gender_view', max_length=2),
        ),
        migrations.AlterField(
            model_name='userprofile',
            name='interests',
            field=models.TextField(blank=True, db_column='Interests', help_text='interests'),
        ),
        migrations.AlterField(
            model_name='userprofile',
            name='kind_books',
            field=models.TextField(blank=True, db_column='KindBooks', help_text='book_subject_preferences'),
        ),
        migrations.AlterField(
            model_name='userprofile',
            name='location_view',
            field=models.CharField(choices=[('F', 'Friends only'), ('E', 'Everyone'), ('N', 'No one')], db_column='LocationView', default='E', help_text='who_user_location', max_length=2),
        ),
        migrations.AlterField(
            model_name='userprofile',
            name='photo',
            field=models.ImageField(blank=True, db_column='Photo', help_text='profile_image', upload_to=''),
        ),
        migrations.AlterField(
            model_name='userprofile',
            name='state',
            field=models.CharField(db_column='State', help_text='user_province', max_length=70),
        ),
        migrations.AlterField(
            model_name='userprofile',
            name='web_site',
            field=models.URLField(blank=True, db_column='WebSite', help_text='web_site'),
        ),
        migrations.AlterField(
            model_name='userprofile',
            name='who_can_see_last_name',
            field=models.CharField(choices=[('F', 'Friends only'), ('E', 'Everyone'), ('N', 'No one')], db_column='WhoCanSeeLastName', default='F', max_length=2),
        ),
        migrations.CreateModel(
            name='UserSettings',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('allow_non_friends_follow_reviews', models.BooleanField(db_column='AllowNonFriendsFollowReviews', default=True, help_text='allow-nonfriends-to-comments-reviews')),
                ('who_can_send_me_private_msg', models.CharField(choices=[('F', 'Friends only'), ('E', 'Everyone'), ('N', 'No one')], db_column='WhoCanSendMePrivMessages', help_text='who_can_send_me_private_message', max_length=2)),
                ('email_visibility', models.CharField(choices=[('F', 'Friends only'), ('E', 'Everyone'), ('N', 'No one')], db_column='EmailVisibility', help_text='email_visibility', max_length=2)),
                ('challenge_question', models.TextField(db_column='ChallengeQuestion', help_text='challenge_question', max_length=2)),
                ('profile_view', models.CharField(choices=[('A', 'Anyone(including search engines)'), ('G', 'Goodreads members'), ('F', 'Just my friends')], db_column='ProfileView', default='G', help_text='profile_view', max_length=2)),
                ('recommendations', models.BooleanField(db_column='Recomendations', default=True, help_text='Recommendations')),
                ('language', models.CharField(choices=[('ES', 'Espa√±ol'), ('EN', 'English')], db_column='Language', help_text='Language', max_length=2)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='accounts.UserProfile')),
            ],
            options={
                'db_table': 'UserSettings',
            },
        ),
        migrations.CreateModel(
            name='GroupEmailSetting',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('get_email', models.CharField(choices=[('D', 'Digest'), ('I', 'Individual'), ('A', 'All'), ('O', 'Notification only'), ('N', 'None')], default='N', max_length=1)),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='accounts.ReadingGroup')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='accounts.UserProfile')),
            ],
        ),
        migrations.CreateModel(
            name='FavoriteGenre',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('genre', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='genres', to='books.Genre')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='users', to='accounts.UserProfile')),
            ],
            options={
                'db_table': 'FavoriteGenre',
            },
        ),
        migrations.CreateModel(
            name='EmailSettings',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email_frequency', models.CharField(choices=[('N', 'Never'), ('D', 'Once a day'), ('W', 'Once a week')], db_column='EmailFrequency', help_text='Email Frequency', max_length=2)),
                ('include_top_friends_only', models.BooleanField(db_column='IncludeTopFriendsOnly', default=False, help_text='Include top friends only')),
                ('include_to_read_books', models.BooleanField(db_column='IncludeToReadBooks', default=True, help_text='Include to read books')),
                ('likes_my_status', models.BooleanField(db_column='WhenSOLikeMyStatus', default=True, help_text='When someone like my update, review, note, highlight, photo, quiz or writing')),
                ('sends_me_message', models.BooleanField(db_column='SendsMeMessage', default=True, help_text='Sends me a message')),
                ('adds_me_friend', models.BooleanField(db_column='AddMeAsFriend', default=True, help_text='Adds me as a friend')),
                ('follow_my_review', models.BooleanField(db_column='FollowMyReview', default=True, help_text='Follows my review')),
                ('invites_group', models.BooleanField(db_column='InviteGroup', default=True, help_text='Invites me to join a group')),
                ('invites_event', models.BooleanField(db_column='InviteEvent', default=True, help_text='Invites me to an event')),
                ('invites_trivia', models.BooleanField(db_column='InviteTrivia', default=True, help_text='Invites to play trivia')),
                ('ask_vote', models.BooleanField(db_column='AskVote', default=True, help_text='Asks me to vote on a Listopia list, take a quiz, or like a quote')),
                ('invites_poll', models.BooleanField(db_column='InvitePoll', default=True, help_text='Invites me to answer a poll')),
                ('mention_recommender', models.BooleanField(db_column='MentionsRecommender', default=True, help_text='Mentions me as a recommender')),
                ('recommend_book', models.BooleanField(db_column='RecommendBook', default=True, help_text='Recommends me a book')),
                ('comment_review', models.CharField(choices=[('E', 'an email'), ('N', 'a notification'), ('B', 'both'), ('A', 'Nothing')], db_column='CommentsReview', default='B', help_text='Comments on my book reviews', max_length=2)),
                ('comment_profile', models.CharField(choices=[('E', 'an email'), ('N', 'a notification'), ('B', 'both'), ('A', 'Nothing')], db_column='CommentProfile', default='B', help_text='Comments on my profile', max_length=2)),
                ('like_listopia', models.CharField(choices=[('E', 'an email'), ('N', 'a notification'), ('B', 'both'), ('A', 'Nothing')], db_column='LikeListopia', default='E', help_text='Likes my Listopia list', max_length=2)),
                ('comment_listopia', models.CharField(choices=[('E', 'an email'), ('N', 'a notification'), ('B', 'both'), ('A', 'Nothing')], db_column='CommentListopia', default='B', help_text='Comments on my Listopia list', max_length=2)),
                ('comment_recommendation', models.CharField(choices=[('E', 'an email'), ('N', 'a notification'), ('B', 'both'), ('A', 'Nothing')], db_column='CommentRecommendation', default='B', help_text='Comments on a recommendation that I‚Äôve given or commented on', max_length=2)),
                ('comment_poll', models.CharField(choices=[('E', 'an email'), ('N', 'a notification'), ('B', 'both'), ('A', 'Nothing')], db_column='CommentPoll', default='B', help_text='Comments on my poll', max_length=2)),
                ('comment_trivia', models.CharField(choices=[('E', 'an email'), ('N', 'a notification'), ('B', 'both'), ('A', 'Nothing')], db_column='CommentTrivia', default='B', help_text='Comments on my trivia question', max_length=2)),
                ('comment_shelve', models.CharField(choices=[('E', 'an email'), ('N', 'a notification'), ('B', 'both'), ('A', 'Nothing')], db_column='CommentShelve', default='B', help_text='Comments on my shelvings, progress updates, notes, quotes, or highlights', max_length=2)),
                ('comment_activity', models.CharField(choices=[('E', 'an email'), ('N', 'a notification'), ('B', 'both'), ('A', 'Nothing')], db_column='CommentActivity', default='B', help_text='Comments on an activity or review I commented on', max_length=2)),
                ('comment_qa', models.CharField(choices=[('E', 'an email'), ('N', 'a notification'), ('B', 'both'), ('A', 'Nothing')], db_column='CommentQA', default='B', help_text='Comments on a Goodreads Q&A that I‚Äôve answered or commented on', max_length=2)),
                ('like_question', models.CharField(choices=[('E', 'an email'), ('N', 'a notification'), ('B', 'both'), ('A', 'Nothing')], db_column='LikeQuestion', default='E', help_text='Likes my question or answer for Goodreads Q&A', max_length=2)),
                ('list_giveaway_book_toread', models.CharField(choices=[('E', 'an email'), ('N', 'a notification'), ('B', 'both'), ('A', 'Nothing')], db_column='ListBookToRead', default='E', help_text='Lists a Giveaway with a book I added as To-Read', max_length=2)),
                ('list_giveaway_author_fallow', models.CharField(choices=[('E', 'an email'), ('N', 'a notification'), ('B', 'both'), ('A', 'Nothing')], db_column='ListGiveAwayAuthorFollow', default='B', help_text='Lists a Giveaway with a book by an author I follow', max_length=2)),
                ('comment_friendship', models.CharField(choices=[('E', 'an email'), ('N', 'a notification'), ('B', 'both'), ('A', 'Nothing')], db_column='CommentFriendship', default='B', help_text='Comments on my friendship with another user', max_length=2)),
                ('post_note', models.CharField(choices=[('E', 'an email'), ('N', 'a notification'), ('B', 'both'), ('A', 'Nothing')], db_column='PostNote', default='B', help_text='Posts notes and highlights for a book or author I have previously shelved (friend/following/author/notable)', max_length=2)),
                ('monthly_newsletter', models.BooleanField(db_column='MonthlyNewsletter', default=True, help_text='monthly_goodreads_newsletters')),
                ('newsletter_favorite_genre', models.BooleanField(db_column='NewsletterFavoriteGenre', default=True, help_text='newsletter_favorite_genre')),
                ('young_newsletter', models.BooleanField(db_column='YoungNewsletter', default=True, help_text='young_newsletter')),
                ('romance_newsletter', models.BooleanField(db_column='RomanceNewsletter', default=True, help_text='romance_newsletter')),
                ('monthly_new_release', models.BooleanField(db_column='MonthlyNewRelease', default=True, help_text='monthly_new_release')),
                ('monthly_new_release_only_author_read', models.BooleanField(db_column='MonthlyNewReleaseOnlyAuthorRead', default=False, help_text='monthly_new_release_only_author_read')),
                ('new_features_gr', models.BooleanField(db_column='NewFeaturesGr', default=True, help_text='new_features_gr')),
                ('update_giveaway_won', models.BooleanField(db_column='UpdateGiveawayWon', default=True, help_text='update_giveaway_won')),
                ('update_giveaway_entered', models.BooleanField(db_column='UpdateGiveawayEntered', default=True, help_text='update_giveaway_entered')),
                ('weekly_digest', models.BooleanField(db_column='WeeklyDigest', default=True, help_text='weekly_digest')),
                ('author_rated', models.BooleanField(db_column='AuthorRated', default=True, help_text='author_rated')),
                ('book_available', models.BooleanField(db_column='BookAvailable', default=True, help_text='book_available')),
                ('author_release', models.BooleanField(db_column='AuthorRelease', default=True, help_text='author_release')),
                ('recommendation_finish_book', models.BooleanField(db_column='RecommendationFinishBook', default=True, help_text='recommendation_finish_book')),
                ('discussion_new_post', models.CharField(choices=[('D', 'Daily'), ('W', 'Weekly')], db_column='DiscussionNewPost', default='D', help_text='discussion_new_post', max_length=1)),
                ('follow_discussion', models.BooleanField(db_column='FollowDiscussion', default=True, help_text='follow_discussion')),
                ('group_start_reading', models.BooleanField(db_column='GroupStartReading', default=True, help_text='group_start_reading')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='accounts.UserProfile')),
            ],
            options={
                'db_table': 'EmailSetting',
            },
        ),
    ]
